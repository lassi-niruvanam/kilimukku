import { expect } from "aegir/chai";

import { isBrowser } from "wherearewe";

import { ClientConstellation, créerConstellation } from "@constl/ipa";
import { constellation, attente } from "@constl/utils-tests";
import {
  கிளிமூக்கு,
  பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை,
  முன்னேற்றம்_தகவல்கள்,
  மொழிபெயர்ப்பு_அகராதி_வகை,
} from "@/குறியீட்டு.js";
import { uneFois } from "@constl/utils-ipa";

const { créerConstellationsTest } = constellation;

const தயாரிப்பு = async ({
  விண்மீன்,
  மூல்_மொழிபெயர்ப்புகள்,
}: {
  விண்மீன்: ClientConstellation;
  மூல்_மொழிபெயர்ப்புகள்: மொழிபெயர்ப்பு_அகராதி_வகை;
}) => {
  const குழு_அடையாளம் = await கிளிமூக்கு.உருவாக்கு({ விண்மீன் });
  return new கிளிமூக்கு({
    விண்மீன்,
    அடையாளம்: குழு_அடையாளம்,
    மூல்_மொழிபெயர்ப்புகள்,
  });
};

describe("கிளிமூக்கு", async () => {
  let விண்மீன்: ClientConstellation;
  let வேறு_விண்மீன்: ClientConstellation;

  const மறந்துவிடு: (() => Promise<void>)[] = [];

  before(async () => {
    const { clients: வாடிக்கையாளர்கள், fOublier: விண்மீனை_மறந்துவிடு } =
      await créerConstellationsTest({
        n: isBrowser ? 1 : 2,
        créerConstellation,
      });
    மறந்துவிடு.push(விண்மீனை_மறந்துவிடு);
    விண்மீன் = வாடிக்கையாளர்கள்[0];
    வேறு_விண்மீன் = வாடிக்கையாளர்கள்[isBrowser ? 0 : 1];
  });

  after(async () => {
    return await Promise.all(மறந்துவிடு.map((செ) => செ()));
  });

  describe("சாபிகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const சாபிகள் = new attente.AttendreRésultat<string[]>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const சாபிகளை_மறந்துவிடு = await என்_கிளிமூக்கு.சாபிகளை_கேள்ளு({
        செ: (இ) => சாபிகள்.mettreÀJour(இ),
        பரிந்துரைகள்: "எனது",
      });
      செ_மறந்துவிடு.push(சாபிகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் சாபிகள்", async () => {
      const மதிப்பு = await சாபிகள்.attendreExiste();
      expect(மதிப்பு).to.contain("சாபி.முதல்", "சாபி.இரண்டாவது");
    });

    it("புதுச பரிந்துரைக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await சாபிகள்.attendreQue((சா) => சா.length > 2);
      expect(மதிப்பு).to.have.members([
        "சாபி.முதல்",
        "சாபி.இரண்டாவது",
        "சாபி.மூன்றாவது",
      ]);
    });

    it("புதுச அங்கீகரிக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            சாபி: "சாபி.நான்காவது",
            மொழிபெயர்ப்பு: "ការបកប្រែ",
            இலக்கு_மொழி: "ខ្មែរ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: new Date(),
          },
        },
      });

      const மதிப்பு = await சாபிகள்.attendreQue((சா) => சா.length > 3);
      expect(மதிப்பு).to.have.members([
        "சாபி.முதல்",
        "சாபி.இரண்டாவது",
        "சாபி.மூன்றாவது",
        "சாபி.நான்காவது",
      ]);
    });
  });

  describe("மொழிகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const மொழிகள் = new attente.AttendreRésultat<string[]>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const சாபிகளை_மறந்துவிடு = await என்_கிளிமூக்கு.மொழிகளை_கேள்ளு({
        செ: (இ) => மொழிகள்.mettreÀJour(இ),
        பரிந்துரைகள்: "எனது",
      });

      செ_மறந்துவிடு.push(சாபிகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் மொழிகள்", async () => {
      const மதிப்பு = await மொழிகள்.attendreExiste();
      expect(மதிப்பு).to.contain("த", "हिं");
    });

    it("புதுச பரிந்துரைக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await மொழிகள்.attendreQue((மொ) => மொ.length > 2);
      expect(மதிப்பு).to.have.members(["த", "हिं", "ខ្មែរ"]);
    });

    it("புதுச அங்கீகரிக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ترجمه",
            இலக்கு_மொழி: "فا",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: new Date(),
          },
        },
      });

      const மதிப்பு = await மொழிகள்.attendreQue((மொ) => மொ.length > 3);
      expect(மதிப்பு).to.have.members(["த", "हिं", "ខ្មែរ", "فا"]);
    });
  });

  describe("பரிந்துரைகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const பரிந்துரைகள் = new attente.AttendreRésultat<
      பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]
    >();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const { fOublier: பரிந்துரைகளை_மறந்துவிடு } =
        await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: (இ) => பரிந்துரைகள்.mettreÀJour(இ),
        });

      செ_மறந்துவிடு.push(பரிந்துரைகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("முதலில் காலியானது", async () => {
      const மதிப்பு = await பரிந்துரைகள்.attendreExiste();
      expect(மதிப்பு).to.be.an.empty("array");
    });

    it("புதுச பரிந்துரை", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 0);
      expect(மதிப்பு).to.have.deep.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்: மதிப்பு[0].அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ការបកប្រែ",
            இலக்கு_மொழி: "ខ្មែរ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு[0].பரிந்துரை.தேதி,
          },
        },
      ]);
    });
    it("பரிந்துரையை நீக்கு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ಅನುವಾದ",
        இலக்கு_மொழி: "ಕ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 1);
      const அடையாளம் = மதிப்பு.find(
        (ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ",
      )?.அடையாளம்;
      expect(அடையாளம்).to.exist();
      expect(மதிப்பு).to.deep.include.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ಅನುವಾದ",
            இலக்கு_மொழி: "ಕ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு.find((ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ")
              ?.பரிந்துரை.தேதி,
          },
        },
      ]);
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரையை_நீக்கு({
        அடையாளம்: அடையாளம் as string,
      });
      await பரிந்துரைகள்.attendreQue(
        (மொ) => !மொ.find((ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ"),
      );
    });
  });

  describe("என் பரிந்துரைகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;
    let வேறு_கிளிமூக்கு: கிளிமூக்கு;

    const என்_பரிந்துரைகள் = new attente.AttendreRésultat<
      பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]
    >();
    const அனைத்த_பரிந்துரைகள் = new attente.AttendreRésultat<
      பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]
    >();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      const மூல்_மொழிபெயர்ப்புகள் = {
        "சாபி.முதல்": {
          த: "விண்மீன்",
          हिं: "तारामंडल",
        },
        "சாபி.இரண்டாவது": {
          த: "கிளிமூக்கு",
        },
      };
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்,
      });
      வேறு_கிளிமூக்கு = new கிளிமூக்கு({
        விண்மீன்: வேறு_விண்மீன்,
        அடையாளம்: என்_கிளிமூக்கு.கிளி?.குழு_அடையாளம்,
        மூல்_மொழிபெயர்ப்புகள்,
      });

      const என்_பரிந்துரைகளை_மறந்துவிடு =
        await என்_கிளிமூக்கு.என்_மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: (இ) => என்_பரிந்துரைகள்.mettreÀJour(இ),
        });

      செ_மறந்துவிடு.push(என்_பரிந்துரைகளை_மறந்துவிடு);

      const { fOublier: அனைத்த_பரிந்துரைகளை_மறந்துவிடு } =
        await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: (இ) => அனைத்த_பரிந்துரைகள்.mettreÀJour(இ),
        });

      செ_மறந்துவிடு.push(அனைத்த_பரிந்துரைகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("முதலில் காலியானது", async () => {
      const மதிப்பு = await என்_பரிந்துரைகள்.attendreExiste();
      expect(மதிப்பு).to.be.an.empty("array");
    });

    it("புதுச பரிந்துரை", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await என்_பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 0);
      expect(மதிப்பு).to.have.deep.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்: மதிப்பு[0].அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ការបកប្រែ",
            இலக்கு_மொழி: "ខ្មែរ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு[0].பரிந்துரை.தேதி,
          },
        },
      ]);
    });

    it("பரிந்துரையை நீக்கு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ಅನುವಾದ",
        இலக்கு_மொழி: "ಕ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await என்_பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 1);
      const அடையாளம் = மதிப்பு.find(
        (ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ",
      )?.அடையாளம்;
      expect(அடையாளம்).to.exist();
      expect(மதிப்பு).to.deep.include.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ಅನುವಾದ",
            இலக்கு_மொழி: "ಕ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு.find((ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ")
              ?.பரிந்துரை.தேதி,
          },
        },
      ]);
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரையை_நீக்கு({
        அடையாளம்: அடையாளம் as string,
      });
      await என்_பரிந்துரைகள்.attendreQue(
        (மொ) => !மொ.find((ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ"),
      );
    });

    it("மற்றவரின் பரிந்துரைகள் காணதில்லை", async () => {
      if (
        (await விண்மீன்.obtIdCompte()) !== (await வேறு_விண்மீன்.obtIdCompte())
      ) {
        await வேறு_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
          சாபி: "சாபி.மூன்றாவது",
          மொழிபெயர்ப்பு: "અનુવાદ",
          இலக்கு_மொழி: "ગુ",
          மூல்_மொழி: "த",
          மூல்_உரை: "மொழிபெயர்ப்பு",
        });
        await அனைத்த_பரிந்துரைகள்.attendreQue(
          (மொ) => !!மொ.find((ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ગુ"),
        );
        expect(
          என்_பரிந்துரைகள்.val?.find((ப) => ப.பரிந்துரை.இலக்கு_மொழி === "ગુ"),
        ).to.be.undefined();
      }
    });
  });

  describe("அங்கீகரி", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const மொழிபெயர்ப்புகள் =
      new attente.AttendreRésultat<மொழிபெயர்ப்பு_அகராதி_வகை>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const மொழிபெயர்ப்புகளை_மறந்துவிடு =
        await என்_கிளிமூக்கு.அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்புகளை_கேள்ளு({
          செ: (இ) => மொழிபெயர்ப்புகள்.mettreÀJour(இ),
        });

      செ_மறந்துவிடு.push(மொழிபெயர்ப்புகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் மொழிபெயர்ப்புகள்", async () => {
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு).to.deep.equal({
        "சாபி.முதல்": {
          த: "விண்மீன்",
          हिं: "तारामंडल",
        },
        "சாபி.இரண்டாவது": {
          த: "கிளிமூக்கு",
        },
      });
    });

    it("அங்கீகறி", async () => {
      const தேதி = new Date();
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ترجمة", // பிழை!!
            இலக்கு_மொழி: "فا",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி,
          },
        },
      });
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreQue(
        (மொ) => !!மொ["சாபி.மூன்றாவது"],
      );
      expect(மதிப்பு["சாபி.மூன்றாவது"]).to.deep.equal({
        فا: "ترجمة",
      });
    });

    it("அங்கீகறிக்கப்பட்டவையை திருத்து", async () => {
      const தேதி = new Date();

      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ترجمه",
            இலக்கு_மொழி: "فا",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி,
          },
        },
      });
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreQue(
        (மொ) => !மொ["சாபி.மூன்றாவது"]?.["فا"].includes("ة"),
      );
      expect(மதிப்பு["சாபி.மூன்றாவது"]).to.deep.equal({
        فا: "ترجمه",
      });
    });

    it("அங்கீகறிக்கப்பட்டவையை நீக்கு", async () => {
      await என்_கிளிமூக்கு.அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பை_நீக்கு({
        சாபி: "சாபி.மூன்றாவது",
        இலக்கு_மொழி: "فا",
      });
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreQue(
        (மொ) => !மொ["சாபி.மூன்றாவது"]?.["فا"],
      );
      expect(மதிப்பு["சாபி.மூன்றாவது"]).to.be.undefined();
    });
  });

  describe("மொழிபெயர்ப்புகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;
    let வேறு_கிளிமூக்கு: கிளிமூக்கு;

    const மூல்_மொழிபெயர்ப்புகள் = {
      "சாபி.முதல்": {
        த: "விண்மீன்",
        हिं: "तारामंडल",
      },
      "சாபி.இரண்டாவது": {
        த: "கிளிமூக்கு",
      },
    };

    const என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள் =
      new attente.AttendreRésultat<மொழிபெயர்ப்பு_அகராதி_வகை>();
    const அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள் =
      new attente.AttendreRésultat<மொழிபெயர்ப்பு_அகராதி_வகை>();
    const பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகள் =
      new attente.AttendreRésultat<மொழிபெயர்ப்பு_அகராதி_வகை>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்,
      });

      வேறு_கிளிமூக்கு = new கிளிமூக்கு({
        விண்மீன்: வேறு_விண்மீன்,
        அடையாளம்: என்_கிளிமூக்கு.கிளி?.குழு_அடையாளம்,
        மூல்_மொழிபெயர்ப்புகள்,
      });

      const என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகளை_மறந்துவிடு =
        await என்_கிளிமூக்கு.மொழிபெயர்ப்புகளை_கேள்ளு({
          செ: (இ) => என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.mettreÀJour(இ),
          பரிந்துரைகள்: "எனது",
        });
      செ_மறந்துவிடு.push(என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகளை_மறந்துவிடு);

      const அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகளை_மறந்துவிடு =
        await என்_கிளிமூக்கு.மொழிபெயர்ப்புகளை_கேள்ளு({
          செ: (இ) => அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.mettreÀJour(இ),
          பரிந்துரைகள்: "எல்லாம்",
        });
      செ_மறந்துவிடு.push(அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகளை_மறந்துவிடு);

      const பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகளை_மறந்துவிடு =
        await என்_கிளிமூக்கு.மொழிபெயர்ப்புகளை_கேள்ளு({
          செ: (இ) => பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகள்.mettreÀJour(இ),
          பரிந்துரைகள்: "வேண்டாம்",
        });
      செ_மறந்துவிடு.push(பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் மொழிபெயர்ப்புகள்", async () => {
      const மதிப்பு_என்_பரிந்துரைகள் =
        await என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு_என்_பரிந்துரைகள்).to.deep.equal(மூல்_மொழிபெயர்ப்புகள்);

      const மதிப்பு_அனைத்த_பரிந்துரைகளுடன் =
        await அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு_அனைத்த_பரிந்துரைகளுடன்).to.deep.equal(
        மூல்_மொழிபெயர்ப்புகள்,
      );

      const மதிப்பு_பரிந்துரை_இல்லாமல் =
        await பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு_பரிந்துரை_இல்லாமல்).to.deep.equal(மூல்_மொழிபெயர்ப்புகள்);
    });

    it("என் பரிந்துரை", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.முதல்",
        மொழிபெயர்ப்பு: "ನಕ್ಷತ್ರಪುಂಜ",
        இலக்கு_மொழி: "ಕ",
        மூல்_மொழி: "த",
        மூல்_உரை: "விண்மீன்",
      });

      // என் பரிந்துரைகள்
      const மதிப்பு_என்_பரிந்துரைகள் =
        await என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreQue(
          (மொ) => !!மொ["சாபி.முதல்"]["ಕ"],
        );
      expect(மதிப்பு_என்_பரிந்துரைகள்["சாபி.முதல்"]).to.deep.equal({
        ...மூல்_மொழிபெயர்ப்புகள்["சாபி.முதல்"],
        ಕ: "ನಕ್ಷತ್ರಪುಂಜ",
      });

      // அனைத்த பரிந்துரைகள்
      const மதிப்பு_அனைத்த_பரிந்துரைகளுடன் =
        await அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreQue(
          (மொ) => !!மொ["சாபி.முதல்"]["ಕ"],
        );
      expect(மதிப்பு_அனைத்த_பரிந்துரைகளுடன்["சாபி.முதல்"]).to.deep.equal({
        ...மூல்_மொழிபெயர்ப்புகள்["சாபி.முதல்"],
        ಕ: "ನಕ್ಷತ್ರಪುಂಜ",
      });

      // பரிந்துரைகள் இல்லாமல்
      const மதிப்பு_பரிந்துரை_இல்லாமல் =
        await பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு_பரிந்துரை_இல்லாமல்["சாபி.முதல்"]).to.deep.equal(
        மூல்_மொழிபெயர்ப்புகள்["சாபி.முதல்"],
      );
    });

    it("மற்றவரின் பரிந்துரை", async () => {
      if (
        (await விண்மீன்.obtIdCompte()) !== (await வேறு_விண்மீன்.obtIdCompte())
      ) {
        await வேறு_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
          சாபி: "சாபி.முதல்",
          மொழிபெயர்ப்பு: "તારામંડળ",
          இலக்கு_மொழி: "ગુ",
          மூல்_மொழி: "த",
          மூல்_உரை: "விண்மீன்",
        });

        // அனைத்த பரிந்துரைகள்
        const மதிப்பு_அனைத்த_பரிந்துரைகளுடன் =
          await அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreQue(
            (மொ) => !!மொ["சாபி.முதல்"]["ગુ"],
          );
        expect(மதிப்பு_அனைத்த_பரிந்துரைகளுடன்["சாபி.முதல்"]["ગુ"]).to.equal(
          "તારામંડળ",
        );
      }

      // என் பரிந்துரைகள்
      const மதிப்பு_என்_பரிந்துரைகள் =
        await என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு_என்_பரிந்துரைகள்["சாபி.முதல்"]["ગુ"]).to.be.undefined();

      // பரிந்துரைகள் இல்லாமல்
      const மதிப்பு_பரிந்துரை_இல்லாமல் =
        await பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு_பரிந்துரை_இல்லாமல்["சாபி.முதல்"]).to.deep.equal(
        மூல்_மொழிபெயர்ப்புகள்["சாபி.முதல்"],
      );
    });

    it("அங்கீகறிக்கப்பட்டவை", async () => {
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: await வேறு_விண்மீன்.obtIdCompte(),
          அடையாளம்: "எதோ ஒன்று",
          பரிந்துரை: {
            சாபி: "சாபி.முதல்",
            மொழிபெயர்ப்பு: "Constelación",
            இலக்கு_மொழி: "cst",
            மூல்_மொழி: "த",
            மூல்_உரை: "விண்மீன்",
            தேதி: new Date(),
          },
        },
      });

      // என் பரிந்துரைகள்
      const மதிப்பு_என்_பரிந்துரைகள் =
        await என்_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreQue(
          (மொ) => !!மொ["சாபி.முதல்"]["cst"],
        );
      expect(மதிப்பு_என்_பரிந்துரைகள்["சாபி.முதல்"]["cst"]).to.equal(
        "Constelación",
      );

      // அனைத்த பரிந்துரைகள்
      const மதிப்பு_அனைத்த_பரிந்துரைகளுடன் =
        await அனைத்த_பரிந்துரைகளுடன்_மொழிபெயர்ப்புகள்.attendreQue(
          (மொ) => !!மொ["சாபி.முதல்"]["cst"],
        );
      expect(மதிப்பு_அனைத்த_பரிந்துரைகளுடன்["சாபி.முதல்"]["cst"]).to.equal(
        "Constelación",
      );

      // பரிந்துரைகள் இல்லாமல்
      const மதிப்பு_பரிந்துரை_இல்லாமல் =
        await பரிந்துரை_இல்லாமல்_மொழிபெயர்ப்புகள்.attendreQue(
          (மொ) => !!மொ["சாபி.முதல்"]["cst"],
        );
      expect(மதிப்பு_பரிந்துரை_இல்லாமல்["சாபி.முதல்"]["cst"]).to.equal(
        "Constelación",
      );
    });
  });

  describe("முன்னேற்றம்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const மூல்_மொழிபெயர்ப்புகள் = {
      "சாபி.முதல்": {
        த: "விண்மீன்",
        हिं: "तारामंडल",
      },
      "சாபி.இரண்டாவது": {
        த: "கிளிமூக்கு",
      },
    };

    const இந்தி_முன்னேற்றம் =
      new attente.AttendreRésultat<முன்னேற்றம்_தகவல்கள்>();
    const தமிழ்_முன்னேற்றம் =
      new attente.AttendreRésultat<முன்னேற்றம்_தகவல்கள்>();
    const இந்தி_வார்த்தை_முன்னேற்றம் =
      new attente.AttendreRésultat<முன்னேற்றம்_தகவல்கள்>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்,
      });

      const இந்தி_முன்னேற்றத்தை_மறந்துவிடு =
        await என்_கிளிமூக்கு.முன்னேற்றத்தை_கேள்ளு({
          மொழி: "हिं",
          வகை: "சாபி",
          செ: (இ) => இந்தி_முன்னேற்றம்.mettreÀJour(இ),
        });
      செ_மறந்துவிடு.push(இந்தி_முன்னேற்றத்தை_மறந்துவிடு);

      const தமிழ்_முன்னேற்றத்தை_மறந்துவிடு =
        await என்_கிளிமூக்கு.முன்னேற்றத்தை_கேள்ளு({
          மொழி: "த",
          வகை: "சாபி",
          செ: (இ) => தமிழ்_முன்னேற்றம்.mettreÀJour(இ),
        });
      செ_மறந்துவிடு.push(தமிழ்_முன்னேற்றத்தை_மறந்துவிடு);

      const இந்தி_வார்த்தை_முன்னேற்றத்தை_மறந்துவிடு =
        await என்_கிளிமூக்கு.முன்னேற்றத்தை_கேள்ளு({
          மொழி: "हिं",
          வகை: "வார்த்தை",
          செ: (இ) => இந்தி_வார்த்தை_முன்னேற்றம்.mettreÀJour(இ),
        });
      செ_மறந்துவிடு.push(இந்தி_வார்த்தை_முன்னேற்றத்தை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் மொழிபெயர்ப்புகள்", async () => {
      const இந்தி_மதிப்பு = await இந்தி_முன்னேற்றம்.attendreExiste();
      expect(இந்தி_மதிப்பு).to.deep.equal({
        அங்கீகரிக்கப்பட்டவை: 1,
        பரிந்துரைக்கப்பட்டவை: 0,
        மொத்தம்: 2,
      });

      const தமிழ்_மதிப்பு = await தமிழ்_முன்னேற்றம்.attendreExiste();
      expect(தமிழ்_மதிப்பு).to.deep.equal({
        அங்கீகரிக்கப்பட்டவை: 2,
        பரிந்துரைக்கப்பட்டவை: 0,
        மொத்தம்: 2,
      });
    });

    it("பரிந்துரைகள்", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "अनुवाद",
        இலக்கு_மொழி: "हिं",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.இரண்டாவது",
        மொழிபெயர்ப்பு: "किलीमूक्कु",
        இலக்கு_மொழி: "हिं",
        மூல்_மொழி: "த",
        மூல்_உரை: "கிளிமூக்கு",
      });
      const இந்தி_மதிப்பு = await இந்தி_முன்னேற்றம்.attendreQue(
        (முன்) => முன்.பரிந்துரைக்கப்பட்டவை > 0,
      );
      expect(இந்தி_மதிப்பு).to.deep.equal({
        அங்கீகரிக்கப்பட்டவை: 1,
        பரிந்துரைக்கப்பட்டவை: 1,
        மொத்தம்: 2,
      });
    });

    it("அங்கீகறிக்கப்பட்டவை", async () => {
      const பரிந்துரைகள் = await uneFois(
        async (fSuivi: (இ: பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]) => void) => {
          return await என்_கிளிமூக்கு.என்_மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
            செ: fSuivi,
          });
        },
        (ப) =>
          !!ப?.find(
            (ப) =>
              ப.பரிந்துரை.இலக்கு_மொழி === "हिं" &&
              ப.பரிந்துரை.சாபி === "சாபி.இரண்டாவது",
          ),
      );
      const பரிந்துரை = பரிந்துரைகள்.filter(
        (ப) =>
          ப.பரிந்துரை.இலக்கு_மொழி === "हिं" &&
          ப.பரிந்துரை.சாபி === "சாபி.இரண்டாவது",
      )[0];
      await என்_கிளிமூக்கு.அங்கீகரி({ பரிந்துரை });

      const இந்தி_மதிப்பு = await இந்தி_முன்னேற்றம்.attendreQue(
        (முன்) => முன்.அங்கீகரிக்கப்பட்டவை > 1,
      );
      expect(இந்தி_மதிப்பு).to.deep.equal({
        அங்கீகரிக்கப்பட்டவை: 2,
        பரிந்துரைக்கப்பட்டவை: 0,
        மொத்தம்: 2,
      });
    });

    it("வார்த்தை", async () => {
      const இந்தி_மதிப்பு = await இந்தி_வார்த்தை_முன்னேற்றம்.attendreExiste();
      expect(இந்தி_மதிப்பு).to.deep.equal({
        அங்கீகரிக்கப்பட்டவை: 18,
        பரிந்துரைக்கப்பட்டவை: 0,
        மொத்தம்: 18,
      });
    });
  });

  describe("பேசு", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;
    let வேறு_கிளிமூக்கு: கிளிமூக்கு;

    const மூல்_மொழிபெயர்ப்புகள் = {
      "சாபி.முதல்": {
        த: "விண்மீன்",
        हिं: "तारामंडल",
      },
      "சாபி.இரண்டாவது": {
        த: "கிளிமூக்கு",
      },
    };

    const பேசு_தமிழ் = new attente.AttendreRésultat<string>();
    const பேசு_என்_பரிந்துரைகள் = new attente.AttendreRésultat<string>();
    const பேசு_அனைத்த_பரிந்துரைகள் = new attente.AttendreRésultat<string>();
    const பேசு_பரிந்துரைகள்_வேண்டாம் = new attente.AttendreRésultat<string>();

    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்,
      });

      வேறு_கிளிமூக்கு = new கிளிமூக்கு({
        விண்மீன்: வேறு_விண்மீன்,
        அடையாளம்: என்_கிளிமூக்கு.கிளி?.குழு_அடையாளம்,
        மூல்_மொழிபெயர்ப்புகள்,
      });

      const பேசு_தமிழ்_மறந்துவிடு = await என்_கிளிமூக்கு.பேசு({
        சாபி: "சாபி.இரண்டாவது",
        மொழி: "த",
        செ: (இ) => பேசு_தமிழ்.mettreÀJour(இ),
      });
      செ_மறந்துவிடு.push(பேசு_தமிழ்_மறந்துவிடு);

      const பேசு_என்_பரிந்துரைகள்_மறந்துவிடு = await என்_கிளிமூக்கு.பேசு({
        சாபி: "சாபி.இரண்டாவது",
        மொழி: "हिं",
        பரிந்துரைகள்: "எனது",
        செ: (இ) => பேசு_என்_பரிந்துரைகள்.mettreÀJour(இ),
      });
      செ_மறந்துவிடு.push(பேசு_என்_பரிந்துரைகள்_மறந்துவிடு);

      const பேசு_அனைத்த_பரிந்துரைகள்_மறந்துவிடு = await என்_கிளிமூக்கு.பேசு({
        சாபி: "சாபி.இரண்டாவது",
        மொழி: "हिं",
        பரிந்துரைகள்: "எல்லாம்",
        செ: (இ) => பேசு_அனைத்த_பரிந்துரைகள்.mettreÀJour(இ),
      });
      செ_மறந்துவிடு.push(பேசு_அனைத்த_பரிந்துரைகள்_மறந்துவிடு);

      const பேசு_பரிந்துரைகள்_வேண்டாம்_மறந்துவிடு = await என்_கிளிமூக்கு.பேசு({
        சாபி: "சாபி.இரண்டாவது",
        மொழி: "हिं",
        பரிந்துரைகள்: "வேண்டாம்",
        செ: (இ) => பேசு_பரிந்துரைகள்_வேண்டாம்.mettreÀJour(இ),
      });
      செ_மறந்துவிடு.push(பேசு_பரிந்துரைகள்_வேண்டாம்_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் மொழிபெயர்ப்புகள்", async () => {
      const மதிப்பு = await பேசு_தமிழ்.attendreExiste();
      expect(மதிப்பு).to.equal("கிளிமூக்கு");

      // என் பரிந்துரைகள்
      expect(பேசு_என்_பரிந்துரைகள்.val).to.be.undefined();

      // அனைத்த பரிந்துரைகள்
      expect(பேசு_அனைத்த_பரிந்துரைகள்.val).to.be.undefined();

      // பரிந்துரைகள் இல்லாமல்
      expect(பேசு_பரிந்துரைகள்_வேண்டாம்.val).to.be.undefined();
    });

    it("மற்றவரின் பரிந்துரை", async () => {
      if (
        (await விண்மீன்.obtIdCompte()) !== (await வேறு_விண்மீன்.obtIdCompte())
      ) {
        await வேறு_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
          சாபி: "சாபி.இரண்டாவது",
          மொழிபெயர்ப்பு: "किलिमूक्कु",
          இலக்கு_மொழி: "हिं",
          மூல்_மொழி: "த",
          மூல்_உரை: "கிளிமூக்கு",
        });

        // அனைத்த பரிந்துரைகள்
        const மதிப்பு_அனைத்த_பரிந்துரைகள் =
          await பேசு_அனைத்த_பரிந்துரைகள்.attendreExiste();
        expect(மதிப்பு_அனைத்த_பரிந்துரைகள்).to.equal("किलिमूक्कु");
      }

      // என் பரிந்துரைகள்
      expect(பேசு_என்_பரிந்துரைகள்.val).to.be.undefined();

      // பரிந்துரைகள் இல்லாமல்
      expect(பேசு_பரிந்துரைகள்_வேண்டாம்.val).to.be.undefined();
    });

    it("என் பரிந்துரை", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.இரண்டாவது",
        மொழிபெயர்ப்பு: "किलीमूक्कु",
        இலக்கு_மொழி: "हिं",
        மூல்_மொழி: "த",
        மூல்_உரை: "கிளிமூக்கு",
      });

      // என் பரிந்துரைகள்
      const மதிப்பு_என்_பரிந்துரைகள் =
        await பேசு_என்_பரிந்துரைகள்.attendreExiste();
      expect(மதிப்பு_என்_பரிந்துரைகள்).to.equal("किलीमूक्कु");

      // அனைத்த பரிந்துரைகள்
      const மதிப்பு_அனைத்த_பரிந்துரைகள் =
        await பேசு_அனைத்த_பரிந்துரைகள்.attendreQue((ப) => ப !== "किलिमूक्कु");
      expect(மதிப்பு_அனைத்த_பரிந்துரைகள்).to.equal("किलीमूक्कु");

      // பரிந்துரைகள் இல்லாமல்
      expect(பேசு_பரிந்துரைகள்_வேண்டாம்.val).to.be.undefined();
    });

    it("அங்கீகறிக்கப்பட்டவை", async () => {
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: await வேறு_விண்மீன்.obtIdCompte(),
          அடையாளம்: "எதோ ஒன்று",
          பரிந்துரை: {
            சாபி: "சாபி.இரண்டாவது",
            மொழிபெயர்ப்பு: "किलिमूक्कु",
            இலக்கு_மொழி: "हिं",
            மூல்_மொழி: "த",
            மூல்_உரை: "கிளிமூக்கு",
            தேதி: new Date(),
          },
        },
      });

      // என் பரிந்துரைகள்
      const மதிப்பு_என்_பரிந்துரைகள் = await பேசு_என்_பரிந்துரைகள்.attendreQue(
        (இ) => இ !== "किलीमूक्कु",
      );
      expect(மதிப்பு_என்_பரிந்துரைகள்).to.equal("किलिमूक्कु");

      // அனைத்த பரிந்துரைகள்
      const மதிப்பு_அனைத்த_பரிந்துரைகள் =
        await பேசு_அனைத்த_பரிந்துரைகள்.attendreExiste();
      expect(மதிப்பு_அனைத்த_பரிந்துரைகள்).to.equal("किलिमूक्कु");

      // பரிந்துரைகள் இல்லாமல்
      const மதிப்பு_பரிந்துரைகள்_வேண்டாம் =
        await பேசு_பரிந்துரைகள்_வேண்டாம்.attendreQue((இ) => இ !== "किलीमूक्कु");
      expect(மதிப்பு_பரிந்துரைகள்_வேண்டாம்).to.equal("किलिमूक्कु");
    });
  });
});
