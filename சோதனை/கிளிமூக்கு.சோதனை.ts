import { expect } from "aegir/chai";

import {isBrowser} from "wherearewe";

import { ClientConstellation, générerClient } from "@constl/ipa";
import { client, attente } from "@constl/utils-tests";
import {
  இலக்கு_மொழி_நெடுவரிசை_அடையாளம்,
  கிளிமூக்கு,
  சாபி_நெடுவரிசை_அடையாளம்,
  பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை,
  மூல்_உரை_நெடுவரிசை_அடையாளம்,
  மூல்_மொழி_நெடுவரிசை_அடையாளம்,
  மொழிபெயர்ப்பு_அகராதி_வகை,
  மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்,
} from "@/குறியீட்டு.js";

const { générerClients } = client;

const தயாரிப்பு = async ({
  விண்மீன்,
  மூல்_மொழிபெயர்ப்புகள்,
}: {
  விண்மீன்: ClientConstellation;
  மூல்_மொழிபெயர்ப்புகள்: மொழிபெயர்ப்பு_அகராதி_வகை;
}) => {
  const குழு_அடையாளம் = await கிளிமூக்கு.உருவாக்கு({ விண்மீன் });
  return new கிளிமூக்கு({
    விண்மீன்,
    அடையாளம்: குழு_அடையாளம்,
    மூல்_மொழிபெயர்ப்புகள்,
  });
};

describe("கிளிமூக்கு", async () => {
  let விண்மீன்: ClientConstellation;
  let வேறு_விண்மீன்: ClientConstellation;

  const மறந்துவிடு: (() => Promise<void>)[] = [];

  before(async () => {
    const { clients: வாடிக்கையாளர்கள், fOublier: விண்மீனை_மறந்துவிடு } =
      await générerClients({ n: isBrowser ? 1 : 2, générerClient });
    மறந்துவிடு.push(விண்மீனை_மறந்துவிடு);
    விண்மீன் = வாடிக்கையாளர்கள்[0];
    வேறு_விண்மீன் = வாடிக்கையாளர்கள்[isBrowser ? 0 : 1];
  });

  after(async () => {
    return await Promise.all(மறந்துவிடு.map((செ) => செ()));
  });

  describe("சாபிகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const சாபிகள் = new attente.AttendreRésultat<string[]>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const சாபிகளை_மறந்துவிடு = await என்_கிளிமூக்கு.சாபிகளை_கேள்ளு({
        செ: (இ) => சாபிகள்.mettreÀJour(இ),
        பரிந்துரைகள்: "எனது",
      });
      செ_மறந்துவிடு.push(சாபிகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் சாபிகள்", async () => {
      const மதிப்பு = await சாபிகள்.attendreExiste();
      expect(மதிப்பு).to.contain("சாபி.முதல்", "சாபி.இரண்டாவது");
    });

    it("புதுச பரிந்துரைக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await சாபிகள்.attendreQue((சா) => சா.length > 2);
      expect(மதிப்பு).to.have.members([
        "சாபி.முதல்",
        "சாபி.இரண்டாவது",
        "சாபி.மூன்றாவது",
      ]);
    });

    it("புதுச அங்கீகரிக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            [சாபி_நெடுவரிசை_அடையாளம்]: "சாபி.நான்காவது",
            [மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்]: "ការបកប្រែ",
            [இலக்கு_மொழி_நெடுவரிசை_அடையாளம்]: "ខ្មែរ",
            [மூல்_மொழி_நெடுவரிசை_அடையாளம்]: "த",
            [மூல்_உரை_நெடுவரிசை_அடையாளம்]: "மொழிபெயர்ப்பு",
            தேதி: Date.now(),
          },
        },
      });

      const மதிப்பு = await சாபிகள்.attendreQue((சா) => சா.length > 3);
      expect(மதிப்பு).to.have.members([
        "சாபி.முதல்",
        "சாபி.இரண்டாவது",
        "சாபி.மூன்றாவது",
        "சாபி.நான்காவது",
      ]);
    });
  });

  describe("மொழிகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const மொழிகள் = new attente.AttendreRésultat<string[]>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const சாபிகளை_மறந்துவிடு = await என்_கிளிமூக்கு.மொழிகளை_கேள்ளு({
        செ: (இ) => மொழிகள்.mettreÀJour(இ),
        பரிந்துரைகள்: "எனது",
      });

      செ_மறந்துவிடு.push(சாபிகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் மொழிகள்", async () => {
      const மதிப்பு = await மொழிகள்.attendreExiste();
      expect(மதிப்பு).to.contain("த", "हिं");
    });

    it("புதுச பரிந்துரைக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await மொழிகள்.attendreQue((மொ) => மொ.length > 2);
      expect(மதிப்பு).to.have.members(["த", "हिं", "ខ្មែរ"]);
    });

    it("புதுச அங்கீகரிக்கப்பட்ட மொழிபெயர்ப்பு", async () => {
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            [சாபி_நெடுவரிசை_அடையாளம்]: "சாபி.மூன்றாவது",
            [மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்]: "ترجمه",
            [இலக்கு_மொழி_நெடுவரிசை_அடையாளம்]: "فا",
            [மூல்_மொழி_நெடுவரிசை_அடையாளம்]: "த",
            [மூல்_உரை_நெடுவரிசை_அடையாளம்]: "மொழிபெயர்ப்பு",
            தேதி: Date.now(),
          },
        },
      });

      const மதிப்பு = await மொழிகள்.attendreQue((மொ) => மொ.length > 3);
      expect(மதிப்பு).to.have.members(["த", "हिं", "ខ្មែរ", "فا"]);
    });
  });

  describe("பரிந்துரைகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const பரிந்துரைகள் = new attente.AttendreRésultat<
      பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]
    >();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const { fOublier: பரிந்துரைகளை_மறந்துவிடு } =
        await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: (இ) => பரிந்துரைகள்.mettreÀJour(இ),
        });

      செ_மறந்துவிடு.push(பரிந்துரைகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("முதலில் காலியானது", async () => {
      const மதிப்பு = await பரிந்துரைகள்.attendreExiste();
      expect(மதிப்பு).to.be.an.empty("array");
    });

    it("புதுச பரிந்துரை", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 0);
      expect(மதிப்பு).to.have.deep.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்: மதிப்பு[0].அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ការបកប្រែ",
            இலக்கு_மொழி: "ខ្មែរ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு[0].பரிந்துரை.தேதி,
          },
        },
      ]);
    });
    it("பரிந்துரையை நீக்கு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ಅನುವಾದ",
        இலக்கு_மொழி: "ಕ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 1);
      const அடையாளம் = மதிப்பு.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ")?.அடையாளம்;
      expect(அடையாளம்).to.exist();
      expect(மதிப்பு).to.deep.include.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ಅನುವಾದ",
            இலக்கு_மொழி: "ಕ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ")?.பரிந்துரை.தேதி,
          },
        },
      ]);
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரையை_நீக்கு({
        அடையாளம்: அடையாளம் as string
      });
      await பரிந்துரைகள்.attendreQue((மொ) => !மொ.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ"));
    });
  });

  describe("என் பரிந்துரைகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;
    let வேறு_கிளிமூக்கு: கிளிமூக்கு;

    const என்_பரிந்துரைகள் = new attente.AttendreRésultat<
      பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]
    >();
    const அனைத்த_பரிந்துரைகள் = new attente.AttendreRésultat<
      பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]
    >();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      const மூல்_மொழிபெயர்ப்புகள் = {
        "சாபி.முதல்": {
          த: "விண்மீன்",
          हिं: "तारामंडल",
        },
        "சாபி.இரண்டாவது": {
          த: "கிளிமூக்கு",
        },
      };
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்,
      });
      வேறு_கிளிமூக்கு = new கிளிமூக்கு({
        விண்மீன்: வேறு_விண்மீன்,
        அடையாளம்: என்_கிளிமூக்கு.கிளி?.குழு_அடையாளம்,
        மூல்_மொழிபெயர்ப்புகள்,
      });

      const என்_பரிந்துரைகளை_மறந்துவிடு =
        await என்_கிளிமூக்கு.என்_மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: (இ) => என்_பரிந்துரைகள்.mettreÀJour(இ),
        });

      செ_மறந்துவிடு.push(என்_பரிந்துரைகளை_மறந்துவிடு);

      const {fOublier: அனைத்த_பரிந்துரைகளை_மறந்துவிடு} =
        await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: (இ) => அனைத்த_பரிந்துரைகள்.mettreÀJour(இ),
        });

      செ_மறந்துவிடு.push(அனைத்த_பரிந்துரைகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("முதலில் காலியானது", async () => {
      const மதிப்பு = await என்_பரிந்துரைகள்.attendreExiste();
      expect(மதிப்பு).to.be.an.empty("array");
    });

    it("புதுச பரிந்துரை", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ការបកប្រែ",
        இலக்கு_மொழி: "ខ្មែរ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await என்_பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 0);
      expect(மதிப்பு).to.have.deep.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்: மதிப்பு[0].அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ការបកប្រែ",
            இலக்கு_மொழி: "ខ្មែរ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு[0].பரிந்துரை.தேதி,
          },
        },
      ]);
    });

    it("பரிந்துரையை நீக்கு", async () => {
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
        சாபி: "சாபி.மூன்றாவது",
        மொழிபெயர்ப்பு: "ಅನುವಾದ",
        இலக்கு_மொழி: "ಕ",
        மூல்_மொழி: "த",
        மூல்_உரை: "மொழிபெயர்ப்பு",
      });
      const மதிப்பு = await என்_பரிந்துரைகள்.attendreQue((மொ) => மொ.length > 1);
      const அடையாளம் = மதிப்பு.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ")?.அடையாளம்;
      expect(அடையாளம்).to.exist();
      expect(மதிப்பு).to.deep.include.members([
        {
          பங்கேற்பாளர்: await விண்மீன்.obtIdCompte(),
          அடையாளம்,
          பரிந்துரை: {
            சாபி: "சாபி.மூன்றாவது",
            மொழிபெயர்ப்பு: "ಅನುವಾದ",
            இலக்கு_மொழி: "ಕ",
            மூல்_மொழி: "த",
            மூல்_உரை: "மொழிபெயர்ப்பு",
            தேதி: மதிப்பு.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ")?.பரிந்துரை.தேதி,
          },
        },
      ]);
      await என்_கிளிமூக்கு.மொழிபெயர்ப்பு_பரிந்துரையை_நீக்கு({
        அடையாளம்: அடையாளம் as string
      });
      await என்_பரிந்துரைகள்.attendreQue((மொ) => !மொ.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ಕ"));
    });

    it("மற்றவரின் பரிந்துரைகள் காணதில்லை", async () => {
      if (await விண்மீன்.obtIdCompte() !== await வேறு_விண்மீன்.obtIdCompte()) {
        வேறு_கிளிமூக்கு.மொழிபெயர்ப்பை_பரிந்துரையு({
          சாபி: "சாபி.மூன்றாவது",
          மொழிபெயர்ப்பு: "અનુવાદ",
          இலக்கு_மொழி: "ગુ",
          மூல்_மொழி: "த",
          மூல்_உரை: "மொழிபெயர்ப்பு",
        });
        await அனைத்த_பரிந்துரைகள்.attendreQue((மொ) => !!மொ.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ગુ"));
        expect(என்_பரிந்துரைகள்.val?.find(ப => ப.பரிந்துரை.இலக்கு_மொழி === "ગુ")).to.be.undefined();
      }
    })
  });

  describe("அங்கீகரி", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const மொழிபெயர்ப்புகள் = new attente.AttendreRésultat<மொழிபெயர்ப்பு_அகராதி_வகை>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const மொழிபெயர்ப்புகளை_மறந்துவிடு = await என்_கிளிமூக்கு.அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்புகளை_கேள்ளு({
        செ: (இ) => மொழிபெயர்ப்புகள்.mettreÀJour(இ),
      });

      செ_மறந்துவிடு.push(மொழிபெயர்ப்புகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it("மூல் மொழிபெயர்ப்புகள்", async () => {
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreExiste();
      expect(மதிப்பு).to.deep.equal({
        "சாபி.முதல்": {
          த: "விண்மீன்",
          हिं: "तारामंडल",
        },
        "சாபி.இரண்டாவது": {
          த: "கிளிமூக்கு",
        },
      });
    });

    it("அங்கீகறி", async () => {
      const தேதி = Date.now();
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            [சாபி_நெடுவரிசை_அடையாளம்]: "சாபி.மூன்றாவது",
            [மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்]: "ترجمة",  // பிழை!!
            [இலக்கு_மொழி_நெடுவரிசை_அடையாளம்]: "فا",
            [மூல்_மொழி_நெடுவரிசை_அடையாளம்]: "த",
            [மூல்_உரை_நெடுவரிசை_அடையாளம்]: "மொழிபெயர்ப்பு",
            தேதி,
          },
        },
      });
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreQue((மொ) => !!மொ['சாபி.மூன்றாவது']);
      expect(மதிப்பு['சாபி.மூன்றாவது']).to.deep.equal(
        {
          فا: "ترجمة",
        },
      );
    });

    it("அங்கீகறிக்கப்பட்டவையை திருத்து", async () => {
      const தேதி = Date.now();
      
      await என்_கிளிமூக்கு.அங்கீகரி({
        பரிந்துரை: {
          பங்கேற்பாளர்: "நான்",
          அடையாளம்: "அடையாளம்",
          பரிந்துரை: {
            [சாபி_நெடுவரிசை_அடையாளம்]: "சாபி.மூன்றாவது",
            [மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்]: "ترجمه",
            [இலக்கு_மொழி_நெடுவரிசை_அடையாளம்]: "فا",
            [மூல்_மொழி_நெடுவரிசை_அடையாளம்]: "த",
            [மூல்_உரை_நெடுவரிசை_அடையாளம்]: "மொழிபெயர்ப்பு",
            தேதி,
          },
        },
      })
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreQue((மொ) => !மொ['சாபி.மூன்றாவது']?.['فا'].includes('ة'));
      expect(மதிப்பு['சாபி.மூன்றாவது']).to.deep.equal(
        {
          فا: "ترجمه",
        },
      );
    });

    it("அங்கீகறிக்கப்பட்டவையை நீக்கு", async () => {
      await என்_கிளிமூக்கு.அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பை_நீக்கு({
        சாபி: 'சாபி.மூன்றாவது',
        இலக்கு_மொழி: 'فا'
      });
      const மதிப்பு = await மொழிபெயர்ப்புகள்.attendreQue((மொ) => !மொ['சாபி.மூன்றாவது']?.['فا']);
      expect(மதிப்பு['சாபி.மூன்றாவது']).to.be.undefined();
    });
  });

  describe("மொழிபெயர்ப்புகள்", async () => {
    let என்_கிளிமூக்கு: கிளிமூக்கு;

    const மொழிபெயர்ப்புகள் = new attente.AttendreRésultat<மொழிபெயர்ப்பு_அகராதி_வகை>();
    const செ_மறந்துவிடு: (() => Promise<void>)[] = [];

    before(async () => {
      என்_கிளிமூக்கு = await தயாரிப்பு({
        விண்மீன்,
        மூல்_மொழிபெயர்ப்புகள்: {
          "சாபி.முதல்": {
            த: "விண்மீன்",
            हिं: "तारामंडल",
          },
          "சாபி.இரண்டாவது": {
            த: "கிளிமூக்கு",
          },
        },
      });

      const மொழிபெயர்ப்புகளை_மறந்துவிடு = await என்_கிளிமூக்கு.மொழிபெயர்ப்புகளை_கேள்ளு({
        செ: (இ) => மொழிபெயர்ப்புகள்.mettreÀJour(இ),
      });

      செ_மறந்துவிடு.push(மொழிபெயர்ப்புகளை_மறந்துவிடு);
    });

    after(async () => {
      return await Promise.all(செ_மறந்துவிடு.map((செ) => செ()));
    });

    it.skip("மூல் மொழிபெயர்ப்புகள்", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
    it.skip("என் பரிந்துரை", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
    it.skip("மற்றவரின் பரிந்துரை", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
    it.skip("அங்கீகறிக்கப்பட்டவை", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
  });

  describe("முன்னேற்றம்", async () => {
    // முன்னேற்றத்தை_கேள்ளு
    it.skip("முதலில் காலியானது", async () => {
      // பரிந்துரைக்கப்பட்டவை
      // அங்கீகரிக்கப்பட்டவை
      // மொத்தம்
    });
    it.skip("மூல் மொழிபெயர்ப்புகள்", async () => {
      // பரிந்துரைக்கப்பட்டவை
      // அங்கீகரிக்கப்பட்டவை
      // மொத்தம்
    });
    it.skip("பரிந்துரைகள்", async () => {
      // பரிந்துரைக்கப்பட்டவை
      // மொத்தம்
    });
    it.skip("அங்கீகறிக்கப்பட்டவை", async () => {
      // அங்கீகரிக்கப்பட்டவை
      // மொத்தம்
    });
    it.skip("சாபி", async () => {
      // பரிந்துரைக்கப்பட்டவை
      // அங்கீகரிக்கப்பட்டவை
      // மொத்தம்
    });
    it.skip("வார்த்தை", async () => {
      // பரிந்துரைக்கப்பட்டவை
      // அங்கீகரிக்கப்பட்டவை
      // மொத்தம்
    });
  });

  describe("பேசு", async () => {
    it.skip("மூல் மொழிபெயர்ப்புகள்", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
    it.skip("என் பரிந்துரை", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
    it.skip("மற்றவரின் பரிந்துரை", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
    it.skip("அங்கீகறிக்கப்பட்டவை", async () => {
      // என் பரிந்துரைகள்
      // அனைத்த பரிந்துரைகள்
      // பரிந்துரைகள் இல்லாமல்
    })
  });
});
