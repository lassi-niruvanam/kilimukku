import type { tableaux } from "@constl/ipa";
import {
  அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_உறுப்படி_வகை,
  அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_வகை,
  பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை,
  மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை,
  மரம்_மொழிபெயர்ப்பு_அகராதி_வகை,
  மொழிபெயர்ப்பு_அகராதி_வகை,
  மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை,
  மொழிபெயர்ப்பு_பரிந்துரை_வகை,
} from "./வகைகள்.js";
import {
  இலக்கு_மொழி_நெடுவரிசை_அடையாளம்,
  சாபி_நெடுவரிசை_அடையாளம்,
  மூல்_உரை_நெடுவரிசை_அடையாளம்,
  மூல்_மொழி_நெடுவரிசை_அடையாளம்,
  மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்,
} from "./மாறிலிகள்.js";
import {
  தேதி_நெடுவரிசை_அடையாளம்,
  பங்கேற்பாளர்_நெடுவரிசை_அடையாளம்,
  பிணையம்_பரிந்துரை,
} from "@lassi-js/kili";

export const மொழிபெயர்ப்பு_உறுப்படியிலிருந்து_மொழிபெயர்ப்பு_முடிவு = (
  உறுப்படி: tableaux.élémentDonnées<அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_உறுப்படி_வகை>,
): அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_வகை => {
  return {
    சாபி: உறுப்படி.données[சாபி_நெடுவரிசை_அடையாளம்],
    தேதி: new Date(உறுப்படி.données[தேதி_நெடுவரிசை_அடையாளம்]),
    பங்கேற்பாளர்: உறுப்படி.données[பங்கேற்பாளர்_நெடுவரிசை_அடையாளம்],
    மொழிபெயர்ப்பு: உறுப்படி.données[மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்],
    மூல்_உரை: உறுப்படி.données[மூல்_உரை_நெடுவரிசை_அடையாளம்],
    மூல்_மொழி: உறுப்படி.données[மூல்_மொழி_நெடுவரிசை_அடையாளம்],
    இலக்கு_மொழி: உறுப்படி.données[இலக்கு_மொழி_நெடுவரிசை_அடையாளம்],
    கைரேகை: உறுப்படி.id,
  };
};

export const பரிந்துரை_உறுப்படியிலிருந்து_பரிந்துரை_முடிவு = (
  பரிந்துரை: பிணையம்_பரிந்துரை<மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை>,
): பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை => {
  return {
    பங்கேற்பாளர்: பரிந்துரை.பங்கேற்பாளர்,
    அடையாளம்: பரிந்துரை.அடையாளம்,
    பரிந்துரை: {
      சாபி: பரிந்துரை.பரிந்துரை[சாபி_நெடுவரிசை_அடையாளம்],
      தேதி: new Date(பரிந்துரை.பரிந்துரை[தேதி_நெடுவரிசை_அடையாளம்]),
      மொழிபெயர்ப்பு: பரிந்துரை.பரிந்துரை[மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்],
      மூல்_உரை: பரிந்துரை.பரிந்துரை[மூல்_உரை_நெடுவரிசை_அடையாளம்],
      மூல்_மொழி: பரிந்துரை.பரிந்துரை[மூல்_மொழி_நெடுவரிசை_அடையாளம்],
      இலக்கு_மொழி: பரிந்துரை.பரிந்துரை[இலக்கு_மொழி_நெடுவரிசை_அடையாளம்],
    },
  };
};

export const மொழிபெயர்ப்பு_பட்டியலிலிருந்து_அகராதி = (
  பட்டியல்: மொழிபெயர்ப்பு_பரிந்துரை_வகை[],
): மொழிபெயர்ப்பு_அகராதி_வகை => {
  const சாபிகள் = new Set(பட்டியல்.map((ப) => ப.சாபி));
  const அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை = {};
  for (const சாபி of சாபிகள்) {
    if (!அகராதி[சாபி]) அகராதி[சாபி] = {};
    const சாபி_மொழிபெயர்ப்புகள் = பட்டியல்.filter((ப) => ப.சாபி === சாபி);
    for (const ப of சாபி_மொழிபெயர்ப்புகள்) {
      அகராதி[சாபி][ப.இலக்கு_மொழி] = ப.மொழிபெயர்ப்பு;
    }
  }
  return அகராதி;
};

export const மொழிபெயர்ப்புகளை_ஒன்றாக்கு = (
  ...அகராதிகள்: மொழிபெயர்ப்பு_அகராதி_வகை[]
): மொழிபெயர்ப்பு_அகராதி_வகை => {
  const அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை = {};
  for (const அக of அகராதிகள்) {
    for (const சாபி of Object.keys(அக)) {
      if (!அகராதி[சாபி]) அகராதி[சாபி] = {};
      for (const [மொழி, உரை] of Object.entries(அக[சாபி])) {
        அகராதி[சாபி][மொழி] = உரை;
      }
    }
  }
  return அகராதி;
};

export const மொழிபெயர்ப்பு_அகராதியிலிருந்து_மரம் = (
  அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை,
): மரம்_மொழிபெயர்ப்பு_அகராதி_வகை => {
  const மரம்: மரம்_மொழிபெயர்ப்பு_அகராதி_வகை = {};
  for (const சாபி in அகராதி) {
    const பிரிவுகள் = சாபி.split(".");

    for (const மொழி of Object.keys(அகராதி[சாபி])) {
      if (!மரம்[மொழி]) மரம்[மொழி] = {};
      let ம = மரம்[மொழி];
      for (const [இ, பிரிவு] of பிரிவுகள்.entries()) {
        if (இ === பிரிவுகள்.length - 1) {
          ம[பிரிவு] = அகராதி[சாபி][மொழி];
        } else {
          if (ம[பிரிவு] === undefined || typeof ம[பிரிவு] === "string")
            ம[பிரிவு] = {};
          ம = ம[பிரிவு] as மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை;
        }
      }
    }
  }
  return மரம்;
};

export const மரத்திலிருந்து_மொழிபெயர்ப்பு_அகராதி = (
  மரம்: மரம்_மொழிபெயர்ப்பு_அகராதி_வகை,
): மொழிபெயர்ப்பு_அகராதி_வகை => {
  const அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை = {};

  function* சாபியையும்_மதிப்பையும்_பெறு({
    ம,
    முன்,
  }: {
    ம: மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை;
    முன்?: string[];
  }): Generator<{ சாபி: string; மதிப்பு: string }> {
    முன் = முன் || [];
    for (const [வேர், கிளை] of Object.entries(ம)) {
      const முன்_ = [...முன், வேர்];
      if (typeof கிளை === "string") {
        yield { சாபி: முன்_.join("."), மதிப்பு: கிளை };
      } else {
        for (const { சாபி, மதிப்பு } of சாபியையும்_மதிப்பையும்_பெறு({
          ம: கிளை,
          முன்: முன்_,
        })) {
          yield { சாபி, மதிப்பு };
        }
      }
    }
  }

  for (const மொழி of Object.keys(மரம்)) {
    for (const { சாபி, மதிப்பு } of சாபியையும்_மதிப்பையும்_பெறு({
      ம: மரம்[மொழி],
    })) {
      if (!அகராதி[சாபி]) அகராதி[சாபி] = {};
      அகராதி[சாபி][மொழி] = மதிப்பு;
    }
  }
  return அகராதி;
};

export const எதுமே_செய்யாதே = async () => {
  // எதுமே செய்யமாட்டோம்
};
